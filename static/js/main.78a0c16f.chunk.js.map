{"version":3,"sources":["Kitty.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["init","canvas","onPointerDown","render","a","requestAnimationFrame","controls","update","mixer","camera","lookAt","model","scene","position","x","z","renderer","autoClear","clear","layers","set","composer","clearDepth","event","console","log","mouse","clientX","window","innerWidth","y","clientY","innerHeight","raycaster","setFromCamera","intersectObjects","children","width","height","THREE","aspect","clientWidth","clientHeight","enable","lightH","add","light","castShadow","shadow","mapSize","near","far","left","right","top","bottom","antialias","alpha","setPixelRatio","devicePixelRatio","setSize","OrbitControls","domElement","enableDamping","dampingFactor","enableZoom","maxPolarAngle","Math","PI","maxDistance","minDistance","geometry","setHSL","random","i","material","color","sphere","groundSphereGeometry","groundSphereTextureLoader","groundSphereTexture","load","groundSphereMaterial","map","groundSphere","receiveShadow","renderScene","RenderPass","bloomPass","UnrealBloomPass","EffectComposer","addPass","addEventListener","loader","GLTFLoader","loadAsync","animations","find","clip","name","idle2","jump","run","walk","clipAction","play","document","ev","stop","code","translateZ","rotateX","rotateY","translateY","Kitty","React","useState","setCanvas","_init","useEffect","ref","element","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.78a0c16f.chunk.js","sourcesContent":["import React from \"react\";\nimport * as THREE from 'three';\nimport { BackSide, RGBAFormat } from \"three\";\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport {GLTF, GLTFLoader} from 'three/examples/jsm/loaders/GLTFLoader';\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer.js';\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass.js';\nimport { ShaderPass } from 'three/examples/jsm/postprocessing/ShaderPass.js';\nimport { UnrealBloomPass } from 'three/examples/jsm/postprocessing/UnrealBloomPass.js';\n\n\n\t\t\tasync function init(canvas: HTMLCanvasElement) {\n\n        // Initial CAMERA positioning\n        const width = window.innerWidth;\n        const height = window.innerHeight;\n        const camera = new THREE.PerspectiveCamera(45, width/height, 1, 20000);\n        camera.position.y = 200;\n        camera.position.z = -400;\n        camera.aspect = canvas.clientWidth / canvas.clientHeight;\n        camera.layers.enable(1)\n        // camera.getWorldDirection(model.scene.position)\n\n        \n\n\t\t\t\tconst scene = new THREE.Scene();\n\n        // LIGHTING\n        const lightH = new THREE.HemisphereLight( 0xffffbb, 0x080820, 0.9 );\n        scene.add(lightH)\n\n\t\t\t\tconst light = new THREE.DirectionalLight( 0xffffbb, 0.5 );\n\n\t\t\t\tlight.castShadow = true;\n\n\t\t\t\tlight.shadow.mapSize.width = 10000;\n\t\t\t\tlight.shadow.mapSize.height = 10000;\n\n\t\t\t\tlight.shadow.camera.near = 1000;\n\t\t\t\tlight.shadow.camera.far = 10000;\n\n\t\t\t\tlight.shadow.camera.left = -10000;\n\t\t\t\tlight.shadow.camera.right = 10000;\n\t\t\t\tlight.shadow.camera.top = 10000;\n\t\t\t\tlight.shadow.camera.bottom = -10000;\n        scene.add( light );\n\n\n        // RENDERER\n        const renderer = new THREE.WebGLRenderer( { antialias: true, canvas, alpha: true } );\n\t\t\t\trenderer.setPixelRatio( window.devicePixelRatio );\n        renderer.setSize(width, height, false);\n\n        // CAMERA CONTROLS\n        const controls = new OrbitControls( camera, renderer.domElement );\n        controls.enableDamping = true;\n        controls.dampingFactor = 0.25;\n        controls.enableZoom = true;\n        controls.maxPolarAngle = Math.PI/3 * 1.42;\n        controls.maxDistance = 1000\n        controls.minDistance = 200\n        // controls.addEventListener( 'change', render );\n        \n\n        // GEOMETRIES\n        // for (let index = 0; index < 2000; index++) {\n        //   const radius = Math.ceil(Math.random()) * index\n        //   const glowOrbGeometry = new THREE.SphereGeometry( radius );\n        //   const glowOrbMaterial = new THREE.MeshBasicMaterial( { color: \"rgba(255, 255, 255)\"} );\n        //   const glowOrb = new THREE.Mesh( glowOrbGeometry, glowOrbMaterial );\n        //   glowOrb.position.set(radius * radius, radius , radius);\n        //   glowOrb.layers.set(1)\n        //   scene.add( glowOrb );\n        //   light.position.set(glowOrb.position.x, glowOrb.position.y, glowOrb.position.z);\n        // }\n\n        // const geometry = new THREE.IcosahedronGeometry( 1, 15 )\n\n        const geometry = new THREE.SphereGeometry( 1 )\n        const color = new THREE.Color();\n        color.setHSL( Math.random(), 0.7, Math.random() * 0.2 + 0.05 );\n\n        for ( let i = 0; i < 250; i ++ ) {\n          const color = new THREE.Color();\n          color.setHSL( Math.random(), 0.7, Math.random() * 0.2 + 0.05 );\n        \n\t\t\t\t\tconst material = new THREE.MeshBasicMaterial( { color: \"#ffffff\" } );\n\t\t\t\t\tconst sphere = new THREE.Mesh( geometry, material );\n\t\t\t\t\tsphere.position.x = Math.random() * 1500 - 50;\n\t\t\t\t\tsphere.position.y = Math.random() * 1500 - 50;\n\t\t\t\t\tsphere.position.z = Math.random() * 1500 - 50;\n\t\t\t\t\tsphere.layers.enable(1);\n\t\t\t\t\tscene.add( sphere );\n\t\t\t\t}\n\n        for ( let i = 0; i < 250; i ++ ) {\n\t\t\t\t\tconst material = new THREE.MeshBasicMaterial( { color: \"#ffffff\" } );\n\t\t\t\t\tconst sphere = new THREE.Mesh( geometry, material );\n\t\t\t\t\tsphere.position.x = - Math.random() * 1500 - 50;\n\t\t\t\t\tsphere.position.y = - Math.random() * 1500 - 50;\n\t\t\t\t\tsphere.position.z = - Math.random() * 1500 - 50;\n\t\t\t\t\tsphere.layers.enable(1);\n\t\t\t\t\tscene.add( sphere );\n\t\t\t\t}\n        for ( let i = 0; i < 250; i ++ ) {\n\t\t\t\t\tconst material = new THREE.MeshBasicMaterial( { color: \"#ffffff\" } );\n\t\t\t\t\tconst sphere = new THREE.Mesh( geometry, material );\n\t\t\t\t\tsphere.position.x = - Math.random() * 1500 - 50;\n\t\t\t\t\tsphere.position.y =  Math.random() * 1500 - 50;\n\t\t\t\t\tsphere.position.z =  Math.random() * 1500 - 50;\n\t\t\t\t\tsphere.layers.enable(1);\n\t\t\t\t\tscene.add( sphere );\n\t\t\t\t}\n        for ( let i = 0; i < 250; i ++ ) {\n\t\t\t\t\tconst material = new THREE.MeshBasicMaterial( { color: \"#ffffff\" } );\n\t\t\t\t\tconst sphere = new THREE.Mesh( geometry, material );\n\t\t\t\t\tsphere.position.x =  Math.random() * 1500 - 50;\n\t\t\t\t\tsphere.position.y = - Math.random() * 1500 - 50;\n\t\t\t\t\tsphere.position.z =  Math.random() * 1500 - 50;\n\t\t\t\t\tsphere.layers.enable(1);\n\t\t\t\t\tscene.add( sphere );\n\t\t\t\t}\n        for ( let i = 0; i < 250; i ++ ) {\n\t\t\t\t\tconst material = new THREE.MeshBasicMaterial( { color: \"#ffffff\" } );\n\t\t\t\t\tconst sphere = new THREE.Mesh( geometry, material );\n\t\t\t\t\tsphere.position.x =  Math.random() * 1500 - 50;\n\t\t\t\t\tsphere.position.y =  Math.random() * 1500 - 50;\n\t\t\t\t\tsphere.position.z = - Math.random() * 1500 - 50;\n\t\t\t\t\tsphere.layers.enable(1);\n\t\t\t\t\tscene.add( sphere );\n\t\t\t\t}\n        for ( let i = 0; i < 250; i ++ ) {\n\t\t\t\t\tconst material = new THREE.MeshBasicMaterial( { color: \"#ffffff\" } );\n\t\t\t\t\tconst sphere = new THREE.Mesh( geometry, material );\n\t\t\t\t\tsphere.position.x =  Math.random() * 1500 - 50;\n\t\t\t\t\tsphere.position.y = - Math.random() * 1500 - 50;\n\t\t\t\t\tsphere.position.z = - Math.random() * 1500 - 50;\n\t\t\t\t\tsphere.layers.enable(1);\n\t\t\t\t\tscene.add( sphere );\n\t\t\t\t}\n        for ( let i = 0; i < 250; i ++ ) {\n\t\t\t\t\tconst material = new THREE.MeshBasicMaterial( { color: \"#ffffff\" } );\n\t\t\t\t\tconst sphere = new THREE.Mesh( geometry, material );\n\t\t\t\t\tsphere.position.x = - Math.random() * 1500 - 50;\n\t\t\t\t\tsphere.position.y =  Math.random() * 1500 - 50;\n\t\t\t\t\tsphere.position.z = - Math.random() * 1500 - 50;\n\t\t\t\t\tsphere.layers.enable(1);\n\t\t\t\t\tscene.add( sphere );\n\t\t\t\t}\n        for ( let i = 0; i < 250; i ++ ) {\n\t\t\t\t\tconst material = new THREE.MeshBasicMaterial( { color: \"#ffffff\" } );\n\t\t\t\t\tconst sphere = new THREE.Mesh( geometry, material );\n\t\t\t\t\tsphere.position.x = - Math.random() * 1500 - 50;\n\t\t\t\t\tsphere.position.y = - Math.random() * 1500 - 50;\n\t\t\t\t\tsphere.position.z =  Math.random() * 1500 - 50;\n\t\t\t\t\tsphere.layers.enable(1);\n\t\t\t\t\tscene.add( sphere );\n\t\t\t\t}\n\n        // const outerSphereGeometry = new THREE.SphereGeometry( 5000, 50, 50 );\n        // const sphereTextureLoader = new THREE.TextureLoader();\n        // const sphereTexture = sphereTextureLoader.load(\"sky.jpg\")\n        // const outerSphereMaterial = new THREE.MeshBasicMaterial( { side: BackSide, map: sphereTexture} );\n        // const outerSphere = new THREE.Mesh( outerSphereGeometry, outerSphereMaterial );\n        // outerSphere.position.set(0, 0, 0);\n        // scene.add( outerSphere );\n\n        const groundSphereGeometry = new THREE.SphereGeometry( 1000, 200, 200 );\n        const groundSphereTextureLoader = new THREE.TextureLoader();\n        const groundSphereTexture = groundSphereTextureLoader.load(\"moon.jpeg\")\n        const groundSphereMaterial = new THREE.MeshBasicMaterial( { map: groundSphereTexture} );\n        const groundSphere = new THREE.Mesh( groundSphereGeometry, groundSphereMaterial );\n        groundSphere.position.set(0, -1000, 0);\n        // groundSphere.layers.set(1)\n        groundSphere.receiveShadow = true;\n        scene.add( groundSphere );\n\n\n\n        // const boxGeometry = new THREE.BoxGeometry( 10000, 10000, 10000 );\n        // const textureLoader = new THREE.TextureLoader();\n        // const texture = textureLoader.load(\"sky.jpg\")\n        // const boxMaterial = new THREE.MeshBasicMaterial( { side: BackSide, map: texture } );\n        // const cube = new THREE.Mesh( boxGeometry, boxMaterial );\n        // cube.receiveShadow = true;\n        // cube.position.y = 1000;\n        // scene.add( cube );\n\n        // const planeGeometry = new THREE.PlaneGeometry( 2000, 2000 );\n        // const planeMaterial = new THREE.MeshToonMaterial( { color: \"#238E47\"} )\n        // const plane = new THREE.Mesh( planeGeometry, planeMaterial );\n        // plane.receiveShadow = true;\n        // plane.lookAt(new THREE.Vector3(0,Math.PI/2,0))\n        // scene.add( plane );\n\n\n        //BLOOM\n\t\t\tconst renderScene = new RenderPass( scene, camera )\n\n        \n      const bloomPass = new UnrealBloomPass( new THREE.Vector2( window.innerWidth, window.innerHeight ), 10, 1.4, 0 )\n        \n      const composer = new EffectComposer( renderer )\n      composer.setSize( window.innerWidth, window.innerHeight )\n        \n      composer.addPass( renderScene )\n      composer.addPass( bloomPass )\n        \n      // renderer.toneMappingExposure = Math.pow( 0.9, 4.0 ) \n        \n\n      const raycaster = new THREE.Raycaster();\n\n      const mouse = new THREE.Vector2();\n\n\n\t\t\tfunction onPointerDown( event: PointerEvent ) {\n        console.log(\"pointer\")\n\t\t\t\tmouse.x = ( event.clientX / window.innerWidth ) * 2 - 1;\n\t\t\t\tmouse.y = - ( event.clientY / window.innerHeight ) * 2 + 1;\n\n\t\t\t\traycaster.setFromCamera( mouse, camera );\n\t\t\t\tconst intersects = raycaster.intersectObjects( scene.children, false );\n\t\t\t\t// if ( intersects.length > 0 ) {\n\n\t\t\t\t// \tconst object = intersects[ 0 ].object;\n\t\t\t\t// \tobject.layers.toggle( BLOOM_SCENE );\n\t\t\t\t// \trender();\n\n\t\t\t\t// }\n\n\t\t\t}\n\n        // TODO: clicking globe turns toggles day/night\n        window.addEventListener( 'pointerdown', onPointerDown );\n\n\n        // window.onresize = function () {\n\n        //   const width = window.innerWidth;\n        //   const height = window.innerHeight;\n  \n        //   camera.aspect = width / height;\n        //   camera.updateProjectionMatrix();\n  \n        //   renderer.setSize( width, height );\n  \n        //   bloomComposer.setSize( width, height );\n        //   finalComposer.setSize( width, height );\n  \n        //   render();\n  \n        // };\n\n        // MODEL\n        const loader = new GLTFLoader();\n        const model = await loader.loadAsync('cartoon-cats/glTF_aqua/CuteCat_glTF.gltf');\n        model.scene.castShadow = true;\n        model.scene.receiveShadow = true;\n        scene.add(model.scene);\n\n        // const position = model.scene.getWorldPosition(model.scene.position);\n\n        // ANIMATIONS\n        const mixer = new THREE.AnimationMixer( model.scene );\n        const attack1 = model.animations.find(clip => clip.name === \"attack1\");\n        const attack2 = model.animations.find(clip => clip.name === \"attack2\");\n        const dmg1 = model.animations.find(clip => clip.name === \"dmg1\");\n        const dmg2 = model.animations.find(clip => clip.name === \"dmg2\");\n        const falls1 = model.animations.find(clip => clip.name === \"falls1\");\n        const falls2 = model.animations.find(clip => clip.name === \"falls2\");\n        const falls3 = model.animations.find(clip => clip.name === \"falls3\");\n        const idle1 = model.animations.find(clip => clip.name === \"idle1\");\n        const idle2 = model.animations.find(clip => clip.name === \"idle2\");\n        const happy = model.animations.find(clip => clip.name === \"happy\");\n        const jump = model.animations.find(clip => clip.name === \"jump\");\n        const no = model.animations.find(clip => clip.name === \"no\");\n        const run = model.animations.find(clip => clip.name === \"run\");\n        const run2 = model.animations.find(clip => clip.name === \"run2\");\n        const wakesup = model.animations.find(clip => clip.name === \"wakesup\");\n        const walk = model.animations.find(clip => clip.name === \"walk\");\n        const waving = model.animations.find(clip => clip.name === \"waving\");\n        const yes = model.animations.find(clip => clip.name === \"yes\");\n\n\n        //ACTIONS\n        if(idle2) mixer.clipAction(idle2).play();\n        document.addEventListener(\"keydown\", (ev) => {\n          console.log(model.scene.position.z)\n          if(idle2) mixer.clipAction(idle2).stop();\n\n            // WALK\n            if(ev.code === \"KeyW\"){\n              if(walk) mixer.clipAction(walk).play();\n              model.scene.translateZ(5);\n              model.scene.rotateX(0.005);\n            }\n  \n            if(ev.code === \"KeyS\"){\n              if(walk) mixer.clipAction(walk).play();\n              model.scene.translateZ(-5);\n            }\n  \n            //RUN\n            if(ev.code === \"ShiftLeft\"){\n              if(run) mixer.clipAction(run).play();\n              model.scene.translateZ(10);\n            }\n\n\n          //ROTATE\n          if(ev.code === \"KeyA\"){\n            if(walk) mixer.clipAction(walk).play();\n            model.scene.rotateY(-0.1);\n\n          }\n\n          if(ev.code === \"KeyD\"){\n            if(walk) mixer.clipAction(walk).play();\n            model.scene.rotateY(0.1);\n          }\n\n          if(ev.code === \"Space\"){\n            if(jump) mixer.clipAction(jump).play();\n            model.scene.translateY(20);\n            model.scene.translateZ(5);\n          }\n\n        });\n\n        document.addEventListener(\"keyup\", (ev) => {\n          if(run) mixer.clipAction(run).stop();\n          if(walk) mixer.clipAction(walk).stop();\n          if(jump) mixer.clipAction(jump).stop();\n          if(ev.code === \"Space\") model.scene.translateY(-20);\n          if(model.scene.position.y > 0) model.scene.position.y = 0;\n          if(idle2) mixer.clipAction(idle2).play();\n\n        });\n\n        // ANIMATION LOOP\n        // renderer.setAnimationLoop(() => {\n        //   // console.log(model.scene.position);\n        //   controls.update();\n        //   if(mixer) {\n        //     mixer.update(0.07);\n        //   }\n        //   // camera.lookAt(model.scene.position.x, 0, model.scene.position.z);\n        //   camera.lookAt(model.scene.position);\n\n        //   renderer.render( scene, camera );\n        // })\n        render();\n        function render(){\n          requestAnimationFrame(render);\n          controls.update();\n          if(mixer) {\n            mixer.update(0.07);\n          }\n          camera.lookAt(model.scene.position.x, 0, model.scene.position.z);\n          \n          renderer.autoClear = false;\n          renderer.clear();\n          \n          camera.layers.set(1);\n          composer.render();\n          \n          renderer.clearDepth();\n\n          camera.layers.set(0);\n          renderer.render(scene, camera);\n        }\n\n        // function render() {\n        //   renderer.render( scene, camera );\n        // }\n\t\t\t}\n\n      \n\n\n\n\n      export function Kitty() {\n        const [canvas, setCanvas] = React.useState<HTMLCanvasElement | null>(null);\n\n        const _init = async () => {\n          if(canvas){\n            await init(canvas);\n          }\n        }\n        \n        React.useEffect(() => {\n          if(canvas) _init();\n        },[canvas]);\n      \n      return (\n      <canvas ref={element => setCanvas(element)} />\n      )\n      }","import React from 'react';\nimport { Kitty } from './Kitty';\n\nimport './App.css';\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Kitty />\n    </div>\n  );\n}\n\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}